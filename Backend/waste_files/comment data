const hireUser = async (req, res) => {
    try {
        // console.log("save user")

        const found = await hireRequestModel.findOne({ r_id: req.params.rid })
        // console.log(req.body.user_id);
        // console.log("found user :: ",found)
        if (found) {
            // if (req.body === null) { res.status(200).send(found) }

            // console.log(req.body)
            const userFound = await hireRequestModel.findOne({ r_id: found.r_id, "hireUser.user_id": req.body.user_id })
            console.log("user Found", userFound)
            if (userFound) {
                const update = await hireRequestModel.findOneAndUpdate(
                    { r_id: found.r_id, "hireUser.user_id": req.body.user_id },
                    {

                    },
                    { new: true })
                console.log("remove user :: ", update)
                return res.status(200).send()
            }
            const user = found.hireUser.concat({
                user_id: req.body.user_id,
                status: false,
                work: req.body.work,
                formDate: req.body.fromDate,
                toDate: req.body.toDate,
                fromTime: req.body.fromTime,
                toTime: req.body.toTime,
                description: req.body.description
            })
            const update = await hireRequestModel.findOneAndUpdate({ r_id: req.params.rid }, { hireUser: user }, { new: true })
            console.log("update newUser :: ", update);
            return res.status(200).send(update)

        }
        else {
            const newUser = new hireRequestModel({
                r_id: req.params.rid,
                hireUser: [{
                    user_id: req.body.user_id,
                    status: false,
                    work: req.body.work,
                    formDate: req.body.fromDate,
                    toDate: req.body.toDate,
                    fromTime: req.body.fromTime,
                    toTime: req.body.toTime,
                    description: req.body.about
                }],
            })

            await newUser.save();
            console.log("newUser :: ", newUser);
            return res.status(200).send()
        }
    }
    catch (error) {
        return res.status(400).send(error.message)
    }
}

// const loginController = async (req, res) => {
//     // console.log(req.params.role)
//     const role = req.params.role.charAt(0)
//     let newUser
//     console.log(req.body.email)
//     try {
//         const found = await regModel.find({ email: req.body.email });
//          console.log("loginfound::",found)
//         if (found.length !== 0) {
//             const fnd_role = found[0].r_id.charAt(0)
//             if (role === fnd_role) {
//                 newUser = new regModel(...found)
//                 // console.log(newUser)
//                 // const token = await found.generateAuthToken()
//                 // return res.status(200).send({ found, token })
//             }
//             else {
//                 //return res.status(400).send()
//                 throw new Error("You are unauthorized for this role")
//             }
//         }
//         else {

//             const id = await regModel.findOne().sort({ createdAt: -1 })
//             // console.log("id ::",id)
//             let rid
//             if (id) {
//                 rid = id.r_id.slice(1)
//                 // console.log("rid from id", rid);
//             }
//             else {
//                 rid = 100
//                 // console.log("rid inital ::",rid);
//             }
//             // console.log(role)
//             // const assignrole = await regModel.assignRole(req.params.role)
//             const r_id = role + ++rid
//             // console.log(r_id);
//             const user = { r_id, ...req.body }
//             // console.log("final user :: ",user);
//             newUser = new regModel(user)
//             // console.log(newUser);
//             await newUser.save()
//             // return res.status(200).send(newUser);

//         }
//         const token = await newUser.generateAuthToken()
//         return res.status(200).send({ newUser, token })
//     }
//     catch (error) {
//         // console.log(error.message)
//         res.status(400).send(error.message)
//     }
// }


// const fast2sms = require('fast-two-sms')

// const avatarUpload = async (req, res) => {
//     try {
//         // await req.user.save()
//         console.log(req)
//         const url = req.protocol + '://' + req.get('host')
//         console.log("req.file", url + '/image/' + req.file.filename)
//         const r_id = req.params.rid
//         const foundUser = await regModel.findOne({ r_id })
//         if (!foundUser) {
//             throw new Error("Please first register youself!")
//         }

//         // console.log("found :: ", foundUser)
//         const found = await avatarModel.findOne({ r_id })
//         if (found) {
//             const updt = await avatarModel.findOneAndUpdate({ r_id }, {
//                 avatar: req.file.path
//             }, { new: true })
//         }
//         else {
//             const newpro = new avatarModel({
//                 r_id,
//                 avatar: req.file.path,
//             })

//             await newpro.save();
//             // console.log(newpro);
//         }

//         return res.status(200).send("Profile pic sucessfully uploaded ! ")
//     }
//     catch (error) {
//         return res.status(400).send(error.message)
//     }
// }

// const createProfile = async (req, res) => {
//     console.log("profile::");
//     try {

//         const r_id = req.params.rid
//         const isunique = await avatarModel.find({ r_id })
//         if (isunique.length === 0) {
//             throw new Error("Please first upload profile photo !")
//         }
//         // const findMbl = await profileModel.findByCredentials(req.body.alt_mob_num, r_id)
//         // console.log(findMbl)
//         const profileDetail = { r_id, ...req.body }
//         // console.log("final user :: ",user);
//         const saveProfile = new profileModel(profileDetail)
//         console.log(saveProfile);
//         if (!saveProfile) {
//             throw new Error("Some problem while saving profile data!")
//         }
//         await saveProfile.save()
//         return res.status(200).send("Profile successfully  saved!")
//         // const saveProfile = await profileModel.findOneAndUpdate({ r_id }, { ...req.body }, { new: true })

//         // console.log(saveProfile)
//         // res.status(200).send(saveProfile)
//     } catch (error) {
//         return res.status(400).send(error.message)
//     }
// }




const fetchEmail = async (req, res) => {
    try {
        const fetchUser = await regModel.findOne({ r_id: req.params.rid })
        return res.status(200).send(fetchUser.email)
    }
    catch (error) {
        console.log("email::", error.message)
        return res.status(400).send(error.message)
    }
}

const fetchAvatar = async (req, res) => {
    try {
        let found = await userModel.find({ r_id: req.params.rid })
        if (found.length === 0) {
            return res.status(200).send("First upload photo for create profile!")
        }
        return res.status(200).send(found)
    } catch (error) {
        return res.status(400).send(error.message)
    }
}

// check alternate password and registered no is not same
userSchema.statics.findByCredentials = async (mob_num, r_id) => {
    const ismbl = await regModel.find({ r_id, mob_num }); //short hand syntax
    if (ismbl.length !== 0) {
        throw new Error(
            'Alternate Mobile No. should be different from Registerd/Login Number.'
        );
    }
    return ismbl;
};

//remove delete user as well as profile
userSchema.pre('remove', async function (next) {
    const user = this;
    await regModel.deleteMany({ r_id: user.r_id });
    await avatarModel.deleteMany({ r_id: user.r_id });
    next();
});




