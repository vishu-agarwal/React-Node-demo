{/* <Grid item xs={1} sm={0.5} marginTop={3}>
                        {workSearch !== "" &&
                            <InputAdornment position="end">
                                <SearchIcon cursor={"pointer"} sx={{ colo: "#163758" }} onClick={(e) => searchChange(e)} />
                            </InputAdornment>}
                    </Grid> */}

                    // status = { saveUser.length !== 0 ? console.log(saveUser.user_id) ? true : false : false },

                    // helperAvatar = userAvatar.length && userAvatar.find((val) => values.r_id === val.r_id) 
                        // console.log(helperAvatar)
                        // hireStatus = hireUser.lenght !== 0 ? hireUser.filter(val => values.r_id === val.user_id).map((val) => val.status) : '';
                        
{/* <Button variant="contained" color="error" onClick={props.click}>Close</Button> */ }


{/* {props.workTime === "Full Day (12 Hrs)" || props.workTime === "Live In (24 Hrs)" || props.workTime === "Night Shift (12 Hrs)" */ }


 // const onHireUser = () => {
    //     dispatch(hireUserThunk(rid))
    //     setEnableHire(false)
    // }


{/* <ExpandCircleDownIcon
                onClick={scrollToBottom}

                variant="contained"
                sx={{ display: 'block', color: "#02a1ff", height: { xs: "40%", sm: "60%", md: "70%" }, width: "50%" }}
                style={{
                    display: visible ? 'inline' : 'none', cursor: "pointer", animation: "movebtn 3s ease-in -out infinite",
                    transition: "all .5s ease -in -out"
                }} /> */}


{/* <Button
                variant="contained"
                // startIcon={<ExpandCircleDownIcon />}
                sx={{ borderRadius: "50%", display: 'block', color: "white" }}
                style={{ display: visible ? 'inline' : 'none', cursor: "pointer", height: "100%", width: "100%" }}
            >
                <ExpandCircleDownIcon size="large" />
            </Button> */}
{/* <ExpandCircleDownIcon
                onClick={scrollToBottom}

                size="large"
                variant="contained"
                sx={{ display: 'block', color: "white", height: "70%", width: "50%" }}
                style={{
                    display: visible ? 'inline' : 'none', cursor: "pointer", animation: "movebtn 3s ease-in -out infinite",
                    transition: "all .5s ease -in -out"
                }} /> */}
{/* <ExpandCircleDownIcon
                onClick={scrollToBottom}
                size="large"
                variant="contained"
                sx={{ display: 'block', color: "white" }}
                style={{ display: visible ? 'inline' : 'none', cursor: "pointer", height: "30%", width: "100%" }} /> */}

                  // window.scrollTo({
    //   top: document.documentElement.scrollHeight,
    //   behavior: 'auto'
    //   /* you can also use 'auto' behaviour 
    //      in place of 'smooth' */
    // });
    
    
     // <ExpandCircleDownIcon
    //   onClick={scrollToBottom}

    //   size="large"
    //   variant="contained"
    //   sx={{ display: 'block', color: "#1000ff", height: "0%", width: "7%" }}
    // style={{
    //   display: visible ? 'inline' : 'none', cursor: "pointer", animation: "movebtn 3s ease-in -out infinite",
    //   transition: "all .5s ease -in -out"
    // }} 
    // />
    
    
    
      // const handleClose = () => {
    //     setOpen(false);
    // };
    // const handleToggle = () => {
    //     setOpen();
    // };
    
    
    

{/* <Button onClick={handleToggle}>Show backdrop</Button> */ }



{/* {pages.map((page) => (
                                        <MenuItem key={page} onClick={handleCloseNavMenu}>
                                            <Typography textAlign="center">{page}</Typography>
                                        </MenuItem>
                                    ))} */}



{/* <MenuItem onClick={() => navigate("/findHelper")} >Hiring Process</MenuItem> */ }



 // const [values,message, setValues] = useState({
    //     name: '',
    //     porf_mbl: '',
    //     age: '',
    //     work: '',
    //     experience: '',
    //     time: '',
    // });




{/* <Tooltip title="Edit">

                                <ModeEditIcon fontSize="medium" color="info" onClick={onEditHandler} />

                            </Tooltip> */}

{/* <CheckOutlinedIcon fontSize="large" sx={{ color:"#faaf00"}} onClick={onEditHandler} /> */ }


 // const [values,message, setValues] = useState({
    //     name: '',
    //     porf_mbl: '',
    //     age: '',
    //     work: '',
    //     experience: '',
    //     time: '',
    // });


    // const phoneRegex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
        // if (phoneRegex.test(event.target.value)) {
        //     console.log(event.target.value)
        // setValues((prevState) => { return { ...prevState, altmbl: event.target.value } }) 

        // alpha numeric  expression /^[a-zA-Z0-9]*$/
        ///^[A-Za-z]+$/ only letters
        // only numbers
        // only alphabels and limited characters /^[a-zA-Z ]{2,30}$/;
        //mobile no validation /^[6-9][0-9]{9}$/
        // /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im 
        // console.log("field id :: ", event.target.id)
        
        
        // console.log(fields)
    // useEffect(() => {
    //     console.log("avatar::", avatar)
    //     if (avatar.length !== 0) {
    //         dispatch(fetchUserProfileThunk(rid))

    //         setfile({
    //             ...file,
    //             // dispFile: URL.createObjectURL(str2blob(userProfile[0].avatar)),
    //             dispFile: avatar[0].avatar

    //         })

    //     }
    // }, [avatar])
    // const str2blob = txt => new Blob([txt]);